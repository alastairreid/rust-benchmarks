#!/usr/bin/env python3

import atexit
import glob
import os
import re
import subprocess
import sys
import tempfile

from termcolor import colored

# legal responses from this script
# (to match the regtest.py script)
status_timeout   = "SMACK timed out"
status_verified  = None
status_error     = "false verification condition"
status_overflow  = "with overflow"
status_reachable = "statement is reachable"
status_unknown   = "unknown result" # can be any string you like

# This "verifier" was used for debugging the interface to regtest.py but
# is not used anymore.
#
# It cheats at verification by just looking at the filename to decide
# what to report.
# This was surprisingly accurate :-)
def runtest_cheat(test):
  status = status_verified
  if "fail" in test: status = status_error
  if "overflow" in test: status = status_overflow
  return status

# Verbosity control flag
verbose = False

# This verifier compiles a Rust file and uses KLEE to detect violations
def runtest_honest(test, klee_flags):
  if verbose: print(f"Checking {colored(test, 'white', attrs=['bold'])}")

  if verbose: print(f"  Constructing cargo for {test}")
  # First, build a cargo project with the right dependencies
  cargodir = mkcargo(test)

  # Second, we compile and link the patched file using LTO to generate the entire
  # application in a single LLVM file
  if verbose: print(f"  Compiling {test}")
  llfile = compile(test, cargodir)
  if llfile is None:
    if verbose: print(colored(f"  FAILED: Test {test} compilation error", 'red'))
    return status_unknown

  # Third, we run KLEE and sift through the KLEE output to generate
  # an appropriate status string
  if verbose: print(f"  Running KLEE to verify {test}")
  status = klee(llfile, "verifier_main", klee_flags)
  if status is not None:
    if verbose: print(colored(f"  FAILED: {test} failed verification", 'red'))
    return status

  # If nothing went wrong, report successful verification
  # (But we are using symbolic execution which may not explore all paths
  # so this really means that no bugs have been found.)
  if verbose: print(colored(f"  PASSED: {test}", 'green'))
  return status_verified

def concat_file(infile, suffix, outfile):
  with open(outfile, "w") as output_file:
    with open(infile, "r") as input_file:
      x = input_file.read()
      print(x, file=output_file)
      print(suffix, file=output_file)


def mkcargo(test):
  cargodir = tempfile.TemporaryDirectory(dir=".", prefix="tmpcargo-").name
  # atexit.register(os.remove, cargodir) # todo: use cleanup() method?
  if verbose: print(f"  Creating cargo project {cargodir}")
  os.system(f"cargo new {cargodir} --bin --quiet")

  # First, we have to construct a wrapper function that does some
  # initialization and then calls main.
  # We attach that to the end of the file being tested.
  wrapper_function = '''

    #[no_mangle]
    pub extern "C" fn verifier_main() {
        klee_annotations::verifier_set_panic_hook();
        main();
    }

  '''
  concat_file(test, wrapper_function, f"{cargodir}/src/main.rs")

  # Second, add dependencies, etc. to the cargo file
  toml_file = f"{cargodir}/Cargo.toml"
  with open(toml_file, "w") as f:
    f.write(f"""
[package]
name = 'test'
edition = '2018'
version = '0.0.1'
            """)

    annotations = "../../klee-annotations"
    verifier    = "../../verifier"
    symbolic    = "../../symbolic"
    symbolic2   = "../../symbolic2"
    f.write("""
[dependencies]
klee-annotations = { path = "%s", features = [ "verifier-panic-handler" ] }
verifier = { path = "%s", features = [ "verifier-klee" ] }
symbolic = { path = "%s", features=[] }
symbolic2= { path = "%s", features=[] }

[profile.dev]
overflow-checks=true
lto=true
# panic="abort"
incremental=false
opt-level=0
debug=false
debug-assertions=true
# overflow-checks=true
rpath=false
codegen-units=1
            """ % (annotations, verifier, symbolic, symbolic2))

  return cargodir


def compile(test, cargodir):
  rustflags = [
      '-Clinker=/bin/true',
      '-Clto',
      '--emit=llvm-ir',
      '-Cpanic=abort',
      '-Warithmetic-overflow',
      '--cfg', 'feature="verifier-klee"'
  ]
  flags = ["-v"] if verbose else []
  process = subprocess.Popen(['/usr/bin/env', 'cargo', 'build'] + flags,
                             cwd=cargodir,
                             env = { "RUSTFLAGS": " ".join(rustflags)
                                    , "PATH": os.environ["PATH"] },
                             stdout=subprocess.PIPE, 
                             stderr=subprocess.PIPE)
  stdout, stderr = process.communicate()
  if process.returncode != 0:
    print("Couldn't compile")
    print(process.args)
    if verbose:
        print(stdout.decode("utf-8"))
        print(stderr.decode("utf-8"))
    return None

  llfile = glob.glob(f"{cargodir}/target/debug/deps/test*.ll")[0]
  return llfile

def klee(llfile, entry, klee_flags):
  process = subprocess.Popen(['klee',
                              '--entry-point='+entry,
                              '--exit-on-error',
                              '--silent-klee-assume']
                             +klee_flags
                             +[llfile],
                             stdout=subprocess.PIPE, 
                             stderr=subprocess.PIPE)
  stdout, stderr = process.communicate()

  if stdout: print(stdout.decode("utf-8"))
  for l in stderr.splitlines():
    if l.startswith(b"KLEE: output directory"):
      pass
    elif l.startswith(b"KLEE: Using"):
      pass
    elif l.startswith(b"warning: Linking two modules of different data layouts"):
      pass
    elif l.startswith(b"KLEE: WARNING:"):
      pass
    elif l.startswith(b"KLEE: WARNING ONCE:"):
      pass
    elif l.startswith(b"KLEE: done:"):
      pass
    elif l.startswith(b"KLEE: HaltTimer invoked"):
      return status_timeout
    elif l.startswith(b"KLEE: halting execution, dumping remaining states"):
      return status_timeout
    elif l.startswith(b"KLEE: ERROR:") and b"unreachable" in l:
      return status_reachable
    elif l.startswith(b"KLEE: ERROR:") and b"overflow" in l:
      return status_overflow
    elif l.startswith(b"KLEE: ERROR:"):
      print(l)
      if verbose: print(stderr.decode("utf-8"))
      return status_error
    elif l != b'':
      print(l)
      return status_unknown

  if process.returncode != 0:
    return status_unknown

  return None


def main():
  # todo: worlds worst command line parsing!
  if sys.argv[1] == "-v":
    global verbose # How do I hate Python? Let me count the ways.
    verbose = True
    del sys.argv[1]
  test = sys.argv[1]
  klee_flags = sys.argv[2:]

  status = runtest_honest(test, klee_flags)
  if  status: print(status)
  exit(0) # exit status doesn't seem to be important, but use 0

if __name__=="__main__":
  main()
